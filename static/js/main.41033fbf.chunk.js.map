{"version":3,"sources":["App.js","index.js"],"names":["index","App","ref","useRef","moreGames","rootMargin","useState","isIntersecting","setIntersecting","React","useEffect","observer","IntersectionObserver","entry","myRef","current","observe","unobserve","useMoreGames","xhr","XMLHttpRequest","open","onload","this","status","data","JSON","parse","responseText","output","indexRangeBottom","indexRangeTop","length","i","image","console","title","description","generateNameplates","document","getElementById","innerHTML","abort","send","style","height","backgroundColor","ReactDOM","render"],"mappings":"oNAOIA,EAAQ,EAEG,SAASC,IACtB,IAAMC,EAAMC,iBAAO,IACbC,EAiDR,SAAsBF,GAA0B,IAArBG,EAAoB,uDAAP,MAAO,EAEHC,oBAAS,GAFN,mBAEtCC,EAFsC,KAEtBC,EAFsB,KAuB7C,OAnBAC,IAAMC,WAAU,WACd,IAAMC,EAAW,IAAIC,sBACnB,YAAc,IAAZC,EAAW,oBAEXL,EAAgBK,EAAMN,kBAExB,CACEF,eAGAS,EAAQZ,EAAIa,QAIhB,OAHID,GACFH,EAASK,QAAQF,GAEZ,WACLH,EAASM,UAAUH,OAIhBP,EAxEWW,CAAahB,EAAK,SAChCiB,EAAM,IAAIC,eA8Bd,OA3BAD,EAAIE,KAAK,MACD,0FACA,GAERF,EAAIG,OAAS,WACX,GAAmB,MAAhBC,KAAKC,OAAe,CACnB,IAAIC,EAAOC,KAAKC,MAAMR,EAAIS,cACtBC,EAAS,GACTC,EAAmB9B,EACnB+B,EAAgB,EAGlBA,EADE/B,EAAQ,IAAMyB,EAAKO,OACLP,EAAKO,OAEFhC,EAAQ,GAE7BA,EAAQ+B,EAEJA,GAAiBN,EAAKO,QACxBH,GAqDV,SAA4BJ,EAAMK,EAAkBC,GAGlD,IAFA,IAAIF,EAAS,GAELI,EAAIH,EAAkBG,EAAIF,EAAeE,IAC7CJ,GAAU,oCACGJ,EAAKQ,GAAGC,MAAM,sBAExBT,EAAKQ,GAAGE,QACXN,GAAU,gCAKVA,GAAU,sBAAsBJ,EAAKQ,GAAGG,MAA9B,sCACkBX,EAAKQ,GAAGI,YAD1B,eAKd,OAAOR,EAvEWS,CAAmBb,EAAMK,EAAkBC,GACrDQ,SAASC,eAAe,aAAaC,WAAaZ,GAE/CV,EAAIuB,UAGfvB,EAAIwB,OAGF,6BACE,yBAAKC,MAAO,CAAEC,OAAQ,SAEtB,yBACE3C,IAAKA,EACL0C,MAAO,CACLC,OAAQ,OACRC,gBAAiB1C,IAGnB,0ECjDR2C,IAASC,OAAO,kBAAC/C,EAAD,MAASsC,SAASC,eAAe,c","file":"static/js/main.41033fbf.chunk.js","sourcesContent":["// Purpose: The main functionality of the website happens here. Infinite Scrolling.\r\n//          Intersection Observer functionality is implemented to detect when the user has reached near the bottom of the webpage.\r\n//          When near the bottom of the page, an AJAX call is made in order to retrieve data from a JSON file,\r\n//          Finally, that data is used to generate the HTML for a new batch of nameplates.\r\n\r\nimport React, { useState, useRef } from 'react'\r\n\r\nvar index = 0;  // a global value that keeps track of the last element printed by our AJAX call.\r\n\r\nexport default function App() {\r\n  const ref = useRef('');                             // ref for the element that we want to detect whether on screen\r\n  const moreGames = useMoreGames(ref, '125px');       // call the hook passing in ref and root margin\r\n  var xhr = new XMLHttpRequest();\r\n\r\n  // note that one could host this file a number of different ways.\r\n  xhr.open('GET',                                                                                        // retrieve data from json file.\r\n          'https://raw.githubusercontent.com/RabbitOTM/RabbitOTM.github.io/master/nameplates.json',      // this is the link to the json file via github.\r\n          true);                                                                                         // this is an asynchronous operation.\r\n  \r\n  xhr.onload = function(){\r\n    if(this.status === 200){\r\n        var data = JSON.parse(xhr.responseText);      // store the data from the json file\r\n        var output = '';                              // initialize html output string    \r\n        var indexRangeBottom = index;                 // the bottom of the range of elements to be generated from the json file.\r\n        var indexRangeTop = 0;                        // the top of the range of elements to be generated from the json file. \r\n\r\n        if (index + 12 >= data.length){               // if printing another 12 nameplates causes the index to surpass the number of total elements in the file\r\n          indexRangeTop = data.length                 // print until the end of the file instead\r\n        }\r\n        else indexRangeTop = index + 12;              // otherwise, print the next 12 nameplates (this happens everytime we request the file)\r\n\r\n        index = indexRangeTop;                        // update index to represent the highest numbered element generated from the file so far\r\n\r\n        if (indexRangeTop <= data.length){\r\n          output += generateNameplates(data, indexRangeBottom, indexRangeTop)       // append new batch of nameplate html to output\r\n          document.getElementById(\"graveyard\").innerHTML += output;                 // send html to the div with id=\"graveyard\"\r\n        }\r\n        else xhr.abort();                             // if the top of the range surpasses the size of the file for any reason, abort the request.          \r\n    }\r\n  }\r\n  xhr.send();\r\n\r\n  return (                                            // HTML indicating that we've reached the bottom of the page\r\n    <div>\r\n      <div style={{ height: '5vh' }}>\r\n      </div>\r\n      <div\r\n        ref={ref}\r\n        style={{\r\n          height: '15vh',\r\n          backgroundColor: moreGames\r\n        }}\r\n      >\r\n        <h1>You've reached the end. Congratulations!</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Hook\r\nfunction useMoreGames(ref, rootMargin = '0px') {\r\n  // State and setter for storing whether element is visible\r\n  const [isIntersecting, setIntersecting] = useState(false);\r\n\r\n  React.useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        // Update our state when observer callback fires\r\n        setIntersecting(entry.isIntersecting);\r\n      },\r\n      {\r\n        rootMargin\r\n      }\r\n    );\r\n    var myRef = ref.current;\r\n    if (myRef) {\r\n      observer.observe(myRef);\r\n    }\r\n    return () => {\r\n      observer.unobserve(myRef);\r\n    };\r\n  });   \r\n\r\n  return isIntersecting;\r\n}\r\n\r\n// generates the html for a batch of nameplates, one for each element within the range passed to the function\r\nfunction generateNameplates(data, indexRangeBottom, indexRangeTop){\r\n  var output = '';\r\n\r\n  for(var i = indexRangeBottom; i < indexRangeTop; i++){\r\n      output += \"<div class='nameplate'>\"+\r\n      \"<img src='\"+data[i].image+\"' alt='Video Game' \";\r\n\r\n      if(data[i].console === (\"SNES\" || \"DS\" || \"3DS\" || \"PS1\")){\r\n      output += \"width='160' height='200'><br>\";                     // to do: change small cover width & height/aspect ratio here\r\n      }\r\n      else\r\n      output += \"width='160' height='200'><br>\"; \r\n\r\n      output += \"<div class='title'>\"+data[i].title+\"</div><hr>\" +     \r\n      \"<div class='description'>\"+data[i].description+\"</div>\" +\r\n      \"</div>\";                \r\n  }                                                                 \r\n\r\n  return output;        // return output\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('loading'));"],"sourceRoot":""}